name: "Backup CosmosDB to Azure Storage"
description: "Backs up a CosmosDB instance to a Storage Account using Azure CLI"
inputs:
  AZURE_CREDENTIALS:
    description: 'Azure credentials in JSON format'
    required: true
  ARM_CLIENT_ID:
    description: 'Azure Client ID'
    required: true
  ARM_CLIENT_SECRET:
    description: 'Azure Client Secret'
    required: true
  ARM_SUBSCRIPTION_ID:
    description: 'Azure Subscription ID'
    required: true
  ARM_TENANT_ID:
    description: 'Azure Tenant ID'
    required: true
  COSMOS_ENDPOINT:
    description: 'Endpoint of the CosmosDB account'
    required: true
  COSMOS_KEY:
    description: 'Access key for CosmosDB'
    required: true
  CONTAINER_NAME:
    description: 'Name of the container in CosmosDB'
    required: true
  DATABASE_NAME:
    description: 'Name of the database in CosmosDB'
    required: true
  RESOURCE_GROUP:
    description: 'Resource group of the CosmosDB'
    required: true
  STORAGE_ACCOUNT_NAME:
    description: 'Name of the Storage Account'
    required: true
  STORAGE_CONTAINER:
    description: 'Name of the container in the Storage Account'
    required: true
  SUBSCRIPTION_ID:
    description: 'Azure Subscription ID (duplicate for compatibility)'
    required: true
  action:
    description: 'Action to perform: backup or restore'
    required: true
    default: 'backup'
    options:
      - backup
      - restore

runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: pip install -r ${{ github.action_path }}/requirements.txt
      shell: bash

    - uses: azure/login@v2
      with:
        creds: ${{ inputs.AZURE_CREDENTIALS }}
        

    - name: Azure CLI script
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az account show

    - name: Upload Files
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az account show
          # CosmosDB environment variables
          export COSMOS_KEY="${{ inputs.COSMOS_KEY }}"
          export COSMOS_ENDPOINT="${{ inputs.COSMOS_ENDPOINT }}"
          export CONTAINER_NAME="${{ inputs.CONTAINER_NAME }}"
          export DATABASE_NAME="${{ inputs.DATABASE_NAME }}"
          export RESOURCE_GROUP="${{ inputs.RESOURCE_GROUP }}"
  
          # Storage Account environment variables
          export STORAGE_ACCOUNT_NAME="${{ inputs.STORAGE_ACCOUNT_NAME }}"
          export STORAGE_CONTAINER="${{ inputs.STORAGE_CONTAINER }}"
  
          # Azure Login environment variables
          export ARM_SUBSCRIPTION_ID="${{ inputs.ARM_SUBSCRIPTION_ID }}"
          export ARM_TENANT_ID="${{ inputs.ARM_TENANT_ID }}"
          export ARM_CLIENT_SECRET="${{ inputs.ARM_CLIENT_SECRET }}"
          export SUBSCRIPTION_ID="${{ inputs.SUBSCRIPTION_ID }}"
          export ARM_CLIENT_ID="${{ inputs.ARM_CLIENT_ID }}"
          EXPORT STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name ${{ inputs.STORAGE_ACCOUNT_NAME }} --query '[0].value' -o tsv)
          echo "Iniciando Job de backup"
          python ${{ github.action_path }}/"${{ inputs.action }}".py 
  
          # OUTPUT_FILE=$(find . -type f -name "cosmosdb_nosql_backup_*.json" | sort | tail -n 1)
          # if [ -f "$OUTPUT_FILE" ]; then
          #   echo "output-file=$OUTPUT_FILE" >> $GITHUB_ENV
          # else
          #   echo "Error: Output file not found!"
          #   exit 1
          # fi

    # - name: Upload file to Azure Storage
    #   if: ${{ inputs.action == 'backup' }}
    #   run: |
    #     if [ -f "$OUTPUT_FILE" ]; then
    #       az storage blob upload \
    #           --account-name ${{ inputs.STORAGE_ACCOUNT_NAME }} \
    #           --container-name ${{ inputs.STORAGE_CONTAINER }} \
    #           --file "$OUTPUT_FILE" \
    #           --name "$(basename "$OUTPUT_FILE")" \
    #           --auth-mode login
    #     else
    #       echo "Error: Output file not found for upload!"
    #       exit 1
    #     fi
    #   shell: bash
